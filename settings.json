{
    // Font:
    // https://github.com/HolyBlackCat/monocat-fonts
    //
    // Extensions:
    // https://github.com/HolyBlackCat/vscode-better-tab
    // https://github.com/HolyBlackCat/vscode-cats-cpp
    // https://github.com/HolyBlackCat/vscode-macros-fixed
    // clangd
    // Cursor Align
    // Explicit Folding
    // Git Graph
    // GitLens
    // Markdown Preview Github Styling
    // Material Icon Theme
    // Native Debug
    // Overtype
    // Task Runner
    // Toggle Header/Source

    "telemetry.enableTelemetry": false,

    "workbench.activityBar.visible": false,
    "workbench.colorTheme": "Cat's Light",
    "workbench.editor.highlightModifiedTabs": true,
    "workbench.editor.untitled.labelFormat": "name",
    "workbench.enableExperiments": false,
    "workbench.iconTheme": "material-icon-theme",
    "workbench.list.horizontalScrolling": true,
    "workbench.settings.enableNaturalLanguageSearch": false,
    "workbench.sideBar.location": "right",
    "workbench.statusBar.visible": true,
    "workbench.tree.indent": 12,
    "workbench.tree.renderIndentGuides": "always",

    "editor.accessibilitySupport": "off",
    "editor.autoSurround": "quotes",
    "editor.detectIndentation": false,
    "editor.emptySelectionClipboard": false,
    "editor.foldingHighlight": false,
    "editor.fontFamily": "'Monocat 6x12', Consolas, 'Courier New', monospace",
    "editor.fontSize": 12,
    "editor.lineHeight": 12,
    "editor.links": false,
    "editor.minimap.enabled": false,
    "editor.multiCursorModifier": "ctrlCmd",
    "editor.parameterHints.cycle": true,
    "editor.renderControlCharacters": true,
    "editor.renderWhitespace": "none",
    "editor.showFoldingControls": "always",
    "editor.snippetSuggestions": "none",
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.trimAutoWhitespace": false,
    "editor.unfoldOnClickAfterEndOfLine": true,

    "window.autoDetectHighContrast": false,
    "window.customMenuBarAltFocus": false,
    "window.menuBarVisibility": "visible",
    "window.restoreWindows": "none",
    "window.titleBarStyle": "custom",

    "debug.allowBreakpointsEverywhere": true,
    "debug.console.fontFamily": "'Monocat 6x12', Consolas, 'Courier New', monospace",
    "debug.console.fontSize": 12,
    "debug.console.lineHeight": 12,
    "debug.inlineValues": true,
    "debug.showInStatusBar": "never",
    "debug.toolBarLocation": "docked",

    "terminal.integrated.cursorBlinking": true,
    "terminal.integrated.cursorStyle": "line",
    "terminal.integrated.enableBell": true,
    "terminal.integrated.fontSize": 12,
    "terminal.integrated.fontWeightBold": "normal",
    "terminal.integrated.scrollback": 3000,
    "terminal.integrated.shell.windows": "Z:\\Lander\\msys2\\usr\\bin\\bash.exe",
    "terminal.integrated.shellArgs.windows": ["--login", "-i"],
    "terminal.integrated.env.windows": {
        "MSYSTEM": "MINGW64",
        "MSYS2_PATH_TYPE": "inherit",
        "CHERE_INVOKING": "yes",
    },

    "files.associations": {
        "*.json": "jsonc",
        "*.h": "cpp"
    },
    "files.autoSave": "off",
    "files.exclude": {
        "obj/": true
    },
    "files.hotExit": "off",
    "files.insertFinalNewline": true,
    "files.trimFinalNewlines": true,
    "files.trimTrailingWhitespace": true,

    "git.allowForcePush": true,
    "git.confirmSync": false,
    "git.enableSmartCommit": true,
    "git.enableStatusBarSync": false,
    "git.path": "Z:\\Lander\\InstalledPrograms\\Git\\bin\\git.exe",
    "git-graph.showStatusBarItem": false,
    "gitlens.advanced.similarityThreshold": 90,
    "gitlens.codeLens.enabled": false,
    "gitlens.currentLine.enabled": false,
    "gitlens.defaultGravatarsStyle": "monsterid",
    "gitlens.hovers.currentLine.over": "line",
    "gitlens.hovers.enabled": false,
    "gitlens.keymap": "none",
    "gitlens.statusBar.enabled": false,
    "gitlens.views.compare.location": "scm",
    "gitlens.views.fileHistory.location": "scm",
    "gitlens.views.lineHistory.location": "scm",
    "gitlens.views.repositories.location": "scm",
    "gitlens.views.search.location": "scm",
    "gitlens.menus": {
        "editor": false,
        "editorGroup": {
            "blame": true,
            "compare": true
        },
        "editorTab": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true
        },
        "explorer": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true
        },
        "scmGroup": {
            "compare": true,
            "openClose": true,
            "stash": true,
            "stashInline": true
        },
        "scmItem": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true,
            "stash": true
        }
    },

    "task.autoDetect": "off",

    "search.exclude": {
        "**/bower_components": false,
        "**/node_modules": false
    },

    "explorer.autoReveal": false,
    "explorer.confirmDelete": false,
    "explorer.confirmDragAndDrop": false,
    "explorer.sortOrder": "type",

    "material-icon-theme.activeIconPack": "none",
    "material-icon-theme.folders.theme": "classic",
    "material-icon-theme.hidesExplorerArrows": true,

    "breadcrumbs.enabled": false,

    "diffEditor.ignoreTrimWhitespace": false,

    // "C_Cpp.autoAddFileAssociations": false,
    // "C_Cpp.autocomplete": "Disabled",
    // "C_Cpp.configurationWarnings": "Disabled",
    // "C_Cpp.dimInactiveRegions": false,
    // "C_Cpp.errorSquiggles": "Disabled",
    // "C_Cpp.formatting": "Disabled",
    // "C_Cpp.intelliSenseEngine": "Disabled",
    // "C_Cpp.clang_format_path": "Z:/Lander/msys2/mingw64/bin/clang-format.exe",

    "macros": {
        "close_param_hints_end": ["closeParameterHints", "cursorEnd"],
        "close_suggestions_end": ["hideSuggestWidget", "cursorEnd"],

        "delete_brackets": ["editor.action.selectToBracket", "deleteLeft"],
        "make_member_initializer": ["editor.action.addSelectionToNextFindMatch", {"command": "editor.action.insertSnippet", "args": {"snippet": "$TM_SELECTED_TEXT($TM_SELECTED_TEXT)"}}],
    },

    "extensions.ignoreRecommendations": true,

    // "clangd.path": "clangd-9",
    "clangd.arguments": [
        "--header-insertion=never",
        "--clang-tidy",
        "--function-arg-placeholders=false"
    ],
    "clangd.semanticHighlighting": false,

    "folding": {
        "cpp": [
            // { // Raw strings. This rule has to be placed above the `(...)` one.
            //     // Disabled because broken. Test case:
            //     // { // Not folded!
            //     //     ()""
            //     // }
            //     "beginRegex": "\\b(?:L|u8|u|U)?R\"([^ ()\\\\\\t]{0,16})\\(",
            //     "endRegex": "\\)\\1\"",
            //     "foldLastLine": false,
            // },
            { // {...}
                "begin": "{",
                "end": "}",
                "foldLastLine": false,
            },
            { // (...)
                "begin": "(",
                "end": ")",
                "foldLastLine": false,
            },
            { // [...]
                "begin": "[",
                "end": "]",
                "foldLastLine": false,
            },
            { // Preprocessor conditionals
                "beginRegex": "^\\s*#\\s*if(?:(?:n)?def)?\\b", // "#if", "#ifdef", "#ifndef".
                "middleRegex": "^\\s*#\\s*el(?:se|if)\\b", // "#else", "#elif"
                "endRegex": "^\\s*#\\s*endif\\b", // "#endif"
            },
            // { // Block comments
            //     // "beginRegex": "^(?:(?:(?!\\/\\/)[^\"'])*?(?:\"(?:\\\\.|[^\"\\\\])*\")?(?:'(?:\\\\.|[^'\\\\])*')?)*?\\/\\*",
            //     "beginRegex": "^(?:(?:[^\"'\\/]*(?:\\/(?:[^\"'\\/*][^\"'\\/]+))*)*(?:\"(?:\\\\.|[^\"\\\\])*\")?(?:'(?:\\\\.|[^'\\\\])*')?)*\\/\\*",
            //     //              |  |                    ||       ^~~~~ ^~~~~~~~~     ||      ^~~~~ ^~~~~~~~     |
            //     //              |  |                    ||  escape seq      char     || escape seq     char     |
            //     //              |  |Eat everything until||Eat a string literal, if   ||Eat a char literal, if   |
            //     //              |  |`"` or `//`.        ||present.                   ||present.                 |
            //     //              |                                                                               |
            //     //              |<- main loop ----------------------------------------------------------------->|
            //     "endRegex": "\\*\\/",
            // }
        ],
        "c": [ // Those are copies of some of the C++ rules.
            { // {...}
                "begin": "{",
                "end": "}",
                "foldLastLine": false,
            },
            { // (...)
                "begin": "(",
                "end": ")",
                "foldLastLine": false,
            },
            { // [...]
                "begin": "[",
                "end": "]",
                "foldLastLine": false,
            },
            { // Preprocessor conditionals
                "beginRegex": "^\\s*#\\s*if(?:(?:n)?def)?\\b", // "#if", "#ifdef", "#ifndef".
                "middleRegex": "^\\s*#\\s*el(?:se|if)\\b", // "#else", "#elif"
                "endRegex": "^\\s*#\\s*endif\\b", // "#endif"
            },
        ],
    },
}
